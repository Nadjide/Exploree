// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  username      String        @unique
  email         String        @unique
  password      String        @default("")
  nom           String        @default("")
  prenom        String        @default("")
  dateNaissance String        @default("")
  telephone     String        @default("")
  image         String?
  role          String        @default("USER")
  createdDate   DateTime      @default(now())
  updatedDate   DateTime      @default(now())
  reservations  Reservation[]
  budget        Budget?
  interactions  UserContenuInteraction[]
  commentaires  Commentaire[]
  likes         Like[]
}

model Promoteur {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  role          String        @default("Entreprise")
  nomEntreprise String
  siret         String
  adresse       String
  mail          String
  codePostal    String
  ville         String
  pays          String
  telephone     String
  image         String?
  bio           String
  createdDate   DateTime      @default(now())
  updatedDate   DateTime      @default(now())
  activites     Activite[]
  restaurants   Restaurant[]
  contenus      Contenu[]
}

model Activite {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  titreAct     String
  typeActivite String
  description  String
  adresse      String
  date         DateTime
  image        String?
  latitude     String
  longitude    String
  promoteurId  String        @db.ObjectId
  promoteur    Promoteur     @relation(fields: [promoteurId], references: [id])
  reservations Reservation[]
}

model Restaurant {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  nomRestaurant String
  adresse       String
  typeCuisine   String
  bio           String
  prixMoyen     Float
  image         String?
  latitude      String
  longitude    String
  promoteurId   String        @db.ObjectId
  promoteur     Promoteur     @relation(fields: [promoteurId], references: [id])
  reservations  Reservation[]
}

model Budget {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @unique @db.ObjectId
  budgetTotal      Float
  budgetDepose     Float
  budgetDisponible Float
  user             User          @relation(fields: [userId], references: [id])
}

model Reservation {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  restaurantId    String?       @db.ObjectId
  activiteId      String?       @db.ObjectId
  dateHeure       DateTime
  nombrePersonnes Int
  statut          String
  user            User          @relation(fields: [userId], references: [id])
  restaurant      Restaurant?   @relation(fields: [restaurantId], references: [id])
  activite        Activite?     @relation(fields: [activiteId], references: [id])
}

model Contenu {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  type        String        // Ex: "video", "reel", etc.
  url         String
  metadata    Json?         // Ex: Tags, description, mots-clés
  promoteurId String        @db.ObjectId
  promoteur   Promoteur     @relation(fields: [promoteurId], references: [id])
  interactions UserContenuInteraction[]
  commentaires Commentaire[]
  likes        Like[]
}

model UserContenuInteraction {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  contenuId   String        @db.ObjectId
  interaction String        // Ex: "viewed", "liked", "shared", "skipped"
  duration    Int?          // Durée en secondes de l'interaction (ex : temps de visionnage)
  createdDate DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  contenu     Contenu       @relation(fields: [contenuId], references: [id])
}

model Commentaire {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  contenuId   String        @db.ObjectId
  texte       String
  createdDate DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  contenu     Contenu       @relation(fields: [contenuId], references: [id])
}

model Like {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  contenuId   String        @db.ObjectId
  createdDate DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  contenu     Contenu       @relation(fields: [contenuId], references: [id])
}